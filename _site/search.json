[
  {
    "objectID": "aboutgit/aboutgit.html",
    "href": "aboutgit/aboutgit.html",
    "title": "Sobre Git",
    "section": "",
    "text": "Git"
  },
  {
    "objectID": "aboutgit/aboutgit.html#operaciones-principales-para-los-que-inician-a-utilizar-git",
    "href": "aboutgit/aboutgit.html#operaciones-principales-para-los-que-inician-a-utilizar-git",
    "title": "Sobre Git",
    "section": "Operaciones principales para los que inician a utilizar git",
    "text": "Operaciones principales para los que inician a utilizar git\nSi est√°s iniciando a utilizar Git, aqu√≠ hay algunas operaciones b√°sicas que debes conocer:\n\nInicializar un repositorio: Este es el primer paso para comenzar a usar Git en un proyecto. Se puede hacer ejecutando el comando git init en la l√≠nea de comandos dentro de la carpeta del proyecto.\nAgregar archivos al √°rea de seguimiento: Una vez que se ha inicializado el repositorio, puedes agregar archivos al √°rea de seguimiento con el comando git add. Esto significa que Git ahora vigilar√° cualquier cambio en esos archivos.\nRealizar un commit: Una vez que hayas agregado archivos al √°rea de seguimiento, puedes hacer un commit para guardar los cambios en la historia del repositorio. Este se puede hacer con el comando git commit -m \"mensaje del commit\"\"\nVer el historial de commits: Puedes ver la historia de los cambios en un repositorio con el comando git log.\nSincronizar con un repositorio remoto: Si trabajas en un equipo o deseas tener una copia de seguridad de tu proyecto en un servidor remoto, puedes sincronizar tu repositorio local con un repositorio remoto mediante los comandos git push y git pull.\n\nEstas son solo algunas de las operaciones b√°sicas de Git, pero existen muchas otras opciones y herramientas para administrar y trabajar con repositorios en Git."
  },
  {
    "objectID": "designpatterns/designpatterns.html",
    "href": "designpatterns/designpatterns.html",
    "title": "Design Patterns",
    "section": "",
    "text": "Pincipios SOLID y patrones de Dise√±o"
  },
  {
    "objectID": "designpatterns/designpatterns.html#por-que-usar-desing-patterns",
    "href": "designpatterns/designpatterns.html#por-que-usar-desing-patterns",
    "title": "Design Patterns",
    "section": "¬ø Por que usar Desing Patterns‚Ä¶?",
    "text": "¬ø Por que usar Desing Patterns‚Ä¶?\n‚ÄúLos patrones de dise√±o en Java son una herramienta esencial para cualquier desarrollador. Mejoran la calidad del c√≥digo al proporcionar soluciones estandarizadas y reutilizables a problemas comunes en el desarrollo de software. Al utilizarlos, los desarrolladores pueden reducir la cantidad de c√≥digo duplicado, mejorar la legibilidad y la mantenibilidad del c√≥digo y hacer que el desarrollo sea m√°s eficiente y organizado. ¬°Optimiza tu c√≥digo con patrones de dise√±o en Java!‚Äù"
  },
  {
    "objectID": "designpatterns/designpatterns.html#los-5-patrones-de-dise√±o-m√°s-utilizados-en-java-son",
    "href": "designpatterns/designpatterns.html#los-5-patrones-de-dise√±o-m√°s-utilizados-en-java-son",
    "title": "Design Patterns",
    "section": "Los 5 patrones de dise√±o m√°s utilizados en Java son:",
    "text": "Los 5 patrones de dise√±o m√°s utilizados en Java son:\n\nüëâDeveloper skills summary\n\nPatr√≥n de Singleton\nPatr√≥n de Fabrica\nPatr√≥n de Estrategia\nPatr√≥n Observer\nPatr√≥n Decorador\n\n\n\n\nPatr√≥n de Singleton: Asegura que una clase solo tenga una instancia y provee un punto de acceso global a ella.\nPatr√≥n de Fabrica: Define una interfaz para crear objetos en una superclase, pero deja que las subclases decidan qu√© clases crear.\nPatr√≥n de Estrategia: Define una familia de algoritmos, encapsula cada uno y los hace intercambiables.\nPatr√≥n de Observer: Define una dependencia uno-a-muchos entre objetos, de manera que cuando un objeto cambia su estado, todos sus dependientes son notificados y actualizados autom√°ticamente.\nPatr√≥n de Decorador: Anade responsabilidades a objetos din√°micamente en tiempo de ejecuci√≥n."
  },
  {
    "objectID": "programmingparadigms/programmingparadigms.html#los-paradigmas-adecuados-puede-marcar-la-diferencia-en-la-calidad-y-eficiencia-del-c√≥digo-producido",
    "href": "programmingparadigms/programmingparadigms.html#los-paradigmas-adecuados-puede-marcar-la-diferencia-en-la-calidad-y-eficiencia-del-c√≥digo-producido",
    "title": "Programming Paradigms",
    "section": "Los paradigmas adecuados puede marcar la diferencia en la calidad y eficiencia del c√≥digo producido",
    "text": "Los paradigmas adecuados puede marcar la diferencia en la calidad y eficiencia del c√≥digo producido\n\nüëâ Developer skills summary\n\nImperative Paradigm\nFunctional Paradigm\nDeclarative Paradigm\nReactive Paradigm\nObject Oriented Paradigms\n\n\n\nLos paradigmas de programaci√≥n son un conjunto de herramientas y t√©cnicas que facilitan la resoluci√≥n de problemas y la implementaci√≥n de soluciones efectivas en el desarrollo de software. Conocer y aplicar los paradigmas adecuados puede marcar la diferencia en la calidad y eficiencia del c√≥digo producido, por lo que es importante que los programadores est√©n familiarizados con los principales paradigmas utilizados en el mercado."
  },
  {
    "objectID": "programmingparadigms/programmingparadigms.html#tipos-de-paradigmas-de-programaci√≥n",
    "href": "programmingparadigms/programmingparadigms.html#tipos-de-paradigmas-de-programaci√≥n",
    "title": "Programming Paradigms",
    "section": "5 tipos de paradigmas de programaci√≥n",
    "text": "5 tipos de paradigmas de programaci√≥n\nExisten varios tipos de paradigmas de programaci√≥n que se deben elegir en funci√≥n del lenguaje de programaci√≥n que se utilice. La elecci√≥n adecuada de los paradigmas garantizar√° que el proceso de programaci√≥n sea eficiente y sin problemas. Aqu√≠ te presentaremos 5 de los paradigmas de programaci√≥n m√°s importantes."
  },
  {
    "objectID": "programmingparadigms/programmingparadigms.html#paradigma-imperativo",
    "href": "programmingparadigms/programmingparadigms.html#paradigma-imperativo",
    "title": "Programming Paradigms",
    "section": "Paradigma Imperativo",
    "text": "Paradigma Imperativo\nEn el mundo de la programaci√≥n, el paradigma imperativo o de procedimientos es uno de los m√°s populares. Este enfoque permite a los programadores crear software mediante la definici√≥n de procedimientos detallados. Se utiliza una serie de instrucciones que explican de manera clara y concisa el funcionamiento del c√≥digo, permitiendo a los usuarios seguir el proceso con facilidad."
  },
  {
    "objectID": "programmingparadigms/programmingparadigms.html#paradigma-funcional",
    "href": "programmingparadigms/programmingparadigms.html#paradigma-funcional",
    "title": "Programming Paradigms",
    "section": "Paradigma Funcional",
    "text": "Paradigma Funcional\nEl paradigma funcional se basa en el uso de funciones matem√°ticas para lograr un resultado. Este tipo de programaci√≥n se enfoca en el resultado deseado y no tanto en los detalles de c√≥mo se llega a √©l. Esto lo hace ideal para el √°mbito acad√©mico, donde se busca comprender conceptos profundos y no necesariamente crear soluciones eficientes en t√©rminos de tiempo y recursos. Es un enfoque distinto al del paradigma imperativo, donde se preocupa m√°s por las instrucciones y pasos que llevan a un resultado."
  },
  {
    "objectID": "programmingparadigms/programmingparadigms.html#paradigma-declarativo",
    "href": "programmingparadigms/programmingparadigms.html#paradigma-declarativo",
    "title": "Programming Paradigms",
    "section": "Paradigma Declarativo",
    "text": "Paradigma Declarativo\nEl paradigma declarativo se enfoca en el resultado desde el comienzo. Con un enfoque en la determinaci√≥n autom√°tica del camino hacia una soluci√≥n, este paradigma puede ser muy eficiente en la programaci√≥n, siempre y cuando se tenga una comprensi√≥n clara del proceso que se est√° llevando a cabo"
  },
  {
    "objectID": "programmingparadigms/programmingparadigms.html#paradigma-reactivo",
    "href": "programmingparadigms/programmingparadigms.html#paradigma-reactivo",
    "title": "Programming Paradigms",
    "section": "Paradigma Reactivo",
    "text": "Paradigma Reactivo\nParadigma reactivo: Este enfoque se centra en el an√°lisis de los flujos de datos, tanto finitos como infinitos, con el objetivo de responder a las demandas durante el desarrollo del proyecto, manteniendo un alto nivel de escalabilidad y una r√°pida respuesta a los cambios en los valores generados por los flujos de datos."
  },
  {
    "objectID": "programmingparadigms/programmingparadigms.html#paradigmas-orientados-a-objetos",
    "href": "programmingparadigms/programmingparadigms.html#paradigmas-orientados-a-objetos",
    "title": "Programming Paradigms",
    "section": "Paradigmas orientados a objetos",
    "text": "Paradigmas orientados a objetos\nEn el paradigma orientado a objetos, se enfoca en trabajar con objetos y componentes de c√≥digo. Cada objeto es una pieza independiente que, cuando se combina con otros, forma parte del sistema que est√° siendo desarrollado. Este enfoque proporciona una estructura clara y eficiente para el proceso de programaci√≥n.\n\n\n\n\n\n\n\n\nLenguaje\nParadigmas\n\n\n\n\nScala\nImperativo, orientado a objetos, funcional, gen√©rico y concurrente\n\n\nErlang\nFuncional, orientado a objetos y funcional\n\n\nPerl\nImperativo, orientado a objetos y funcional\n\n\nPHP\nImperativo, orientado a objetos, funcional y reflexivo\n\n\nJavaScript\nImperativo, orientado a objetos (prototipos) y funcional\n\n\nJava\nImperativo, orientado a objetos, reflexivo y gen√©rico\n\n\nPython y Ruby\nImperativo, orientado a objetos, reflexivo y funcional\n\n\nC++\nImperativo, orientado a objetos, funcional y gen√©rico\n\n\nC#\nImperativo, orientado a objetos, funcional (lambda), reflexivo y gen√©rico\n\n\nLisp\nOrientado a objetos, funcional y declarativo\n\n\nProlog\nL√≥gico y declarativo"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome ComboBackend",
    "section": "",
    "text": "B{.span}ienvenidos a la pagina web especializada en backend Develoment. Somos un equipo de desarrolladores apasionados por la tecnolog√≠a y la programaci√≥n, y estamos aqu√≠ para ayudarte a aprender , comprender y aplicar los conceptos y t√©cnicas m√°s actuales en el desarrollo de backend."
  }
]